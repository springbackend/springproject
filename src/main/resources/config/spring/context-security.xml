<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security-4.2.xsd">

	<context:component-scan
		base-package="com.insilicogen.example" use-default-filters="false">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Service" />
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Repository" />
	</context:component-scan>

	<global-method-security
		secured-annotations="enabled" pre-post-annotations="enabled" />

	<!-- index.html과 resources 폴더의 하위 자원들은 사용자 인증/인가 필터를 적용하지 않도록 설정 -->
	<http pattern="/" security="none" />
	<http pattern="/index.html" security="none" />
	<http pattern="/resources/**" security="none" />

	<!-- 사용자 인증 필터 설정(/api/login 으로 요청에 대한 처리 설정) -->
	<http pattern="/api/login" auto-config="true"
		use-expressions="true">
		<csrf disabled="true" />
		<intercept-url pattern="/**" access="permitAll" />

		<form-login login-processing-url="/api/login"
			username-parameter="username" password-parameter="password"
			always-use-default-target="false" />

		<!-- 사용자 로그인 요청을 받으면 뒤의 설정하게 되는 사용자 로그인 필터(loginFilter)를 사용하도록 설정 -->
		<http-basic entry-point-ref="authenticationEntryPoint" />
		<custom-filter before="FORM_LOGIN_FILTER"
			ref="loginFilter" />
	</http>

	<!-- 그 외 다른 요청에 대한 사용자 인가 필터 설정 -->
	<http pattern="/**" auto-config="true" use-expressions="true">
		<csrf disabled="true" />
		<intercept-url pattern="/api/**"
			access="isAuthenticated()" method="GET" />
		<intercept-url pattern="/admin/**"
			access="hasRole('ROLE_ADMIN')" />

		<access-denied-handler ref="accessDenied" />

		<http-basic entry-point-ref="authenticationEntryPoint" />
		<custom-filter before="BASIC_AUTH_FILTER"
			ref="authenticationFilter" />
	</http>

	<!-- 사용자 권한과 인가 실패처리 객체 선언 -->
	<beans:bean id="accessDenied"
		class="com.insilicogen.example.security.StatelessAccessDeniedHandler" />

	<!-- 서버 암호화 객체 선언 -->
	<beans:bean id="passwordEncoder"
		class="org.springframework.security.authentication.encoding.ShaPasswordEncoder" />

	<!-- 사용자 정보 관리 서비스 객체 선언 -->
	<beans:bean id="userDetailsService"
		class="com.insilicogen.example.service.UserDetailsService" />

	<!-- 사용자 로그인 처리 객체 선언 -->
	<beans:bean id="loginFilter"
		class="com.insilicogen.example.security.StatelessLoginFilter">
		<beans:constructor-arg name="urlMapping"
			type="java.lang.String" value="/api/login" />
		<beans:constructor-arg name="authManager"
			ref="authManager" />
	</beans:bean>

	<!-- 사용자 인가 엔트리 객체 선언 -->
	<beans:bean id="authenticationEntryPoint"
		class="com.insilicogen.example.security.StatelessAuthenticationEntryPoint" />

	<!-- 사용자 인가 필터 객체 선언 -->
	<beans:bean id="authenticationFilter"
		class="com.insilicogen.example.security.StatelessAuthenticationFilter" />

	<beans:bean id="authenticationProvider"
		class="com.insilicogen.example.security.StatelessAuthenticationProvider" />

	<authentication-manager id="authManager">
		<authentication-provider
			ref="authenticationProvider" />
	</authentication-manager>

</beans:beans>